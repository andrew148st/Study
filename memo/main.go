package main

// У нас есть интерфейс Memo. Его суть в том, что он запоминает в себе одно значение (в нашем случае строку).
// При вызове метода Store, значение должно в него записаться.
// Вызов метода Load возвращает нам последнее записанное значение.
type Memo interface {
	Store(string)
	Load() string
}

type InMemoryMemo struct { // реализуем структуру InMemoryMemo, которая будет хранить в себе одну строку
	storage string // поле, в котором эта строка будет храниться
}

func (i *InMemoryMemo) Store(value string) { // объявляем на структуре метод, который эту строку и запишет
	i.storage = value // записываем строку внутрь структуры
}

func (i *InMemoryMemo) Load() string { // объявляем на структуре метод, который будет возвращать последнюю сохраненную строку
	return i.storage // возвращаем поле структуры
}

func main() {
	var m Memo = &InMemoryMemo{} // создаем переменную m типа Memo, и присваиваем ей значение инстанса структуры InMemoryMemo

	m.Store("test")         // записываем в m строку "test"
	if m.Load() != "test" { // проверяем, если метод Load() не вернет ту же строку, которую сохранили
		panic("значение не сохранилось") // то ломаем программу
	}
}
